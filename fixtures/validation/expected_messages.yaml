# 
# This document specifies messages expecations on tested fixtures (errors and warnings)
# Messages may be either a plain string (assert.Contains) or a simple regexp (assert.True(regexp.MatchString())
fixture-patternProperties.json:
  comment: Exercise pattern properties (for default values), with an invalid pattern
  todo: should be generalized to example values when supported
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: definitions.Tag.patternProperties in body is a forbidden property
    withContinueOnErrors: false
    isRegexp: false
  - message: definitions.TagInvalidDefault.patternProperties in body is a forbidden property
    withContinueOnErrors: false
    isRegexp: false
  - message: definitions.TagWrong.patternProperties in body is a forbidden property
    withContinueOnErrors: false
    isRegeexp: false
  - message: 'definitions.TagInvalidDefault.default.id in body must be of type integer: "string"'
    withContinueOnErrors: true
    isRegexp: false
  - message: 'definitions.TagInvalidDefault.default.nb-1 in body must be of type integer: "string"'
    withContinueOnErrors: true
    isRegexp: false
  - message: 'definitions.TagInvalidDefault.default.nb-2 in body must be of type integer: "string"'
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings:
  - message: 'definition "#/definitions/Parent" is not used anywhere'
    withContinueOnErrors: true
    isRegexp: false
bitbucket.json:
  comment: Path differing by only a trailing "/" are not considered duplicates
  todo:
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings: []
fixture-161-2.json:
  comment: |
    Variant of Issue#161: this is a partially fixed spec. In this version, the
    name param type is fixed, but the default value remains wrongly typed'

  todo: 
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: default value for requestBody in body does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  - message: 'requestBody.default in body must be of type object: "string"'
    withContinueOnErrors: false
    isRegexp: false
  expectedWarnings: []
fixture-161-good.json:
  comment: 'Issue#161: this is the corresponding corrected spec which should be valid'
  todo: 
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings: []
fixture-161.json:
  comment: 'Issue#161: default value as object'
  todo: This spec may also be used to check example values
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: default value for requestBody in body does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  - message: 'requestBody.default in body must be of type object: "string"'
    withContinueOnErrors: false
    isRegexp: false
  expectedWarnings: []
fixture-342-2.yaml:
  comment: Botched correction attempt for fixture-342
  todo: 
  expectedLoadError: true
  expectedValid: false
  expectedMessages:
  # This one is a regexp to avoid being too stringent on expectations from another package (loads or analysis)
  - message: '.*cannot unmarshal.*'
    withContinueOnErrors: false
    isRegexp: true
  expectedWarnings: []
fixture-342.yaml:
  comment: 'Panic on interface conversion: early stop on error prevents the panic, but continuing it goes in, it goes down'
  todo: $ref have no sibling should be more general
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./get_main_object.get.parameters" must validate one and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: 'invalid definition as Schema for parameter sid in body in operation ""'
    withContinueOnErrors: true
    isRegexp: false
  - message: some parameters definitions are broken in "/get_main_object".GET. Cannot continue validating parameters for operation
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings:
  - message: definition "#/definitions/sample_info" is not used anywhere
    withContinueOnErrors: true
    isRegexp: false
  - message: $ref property should have no sibling in "".sid
    withContinueOnErrors: true
    isRegexp: false
fixture-581-good-numbers.yaml:
  comment: 
  todo: 
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings: []
fixture-581-good.yaml:
  comment:
  todo:
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings: []
fixture-581-inline-param-format.yaml:
  comment: 
  todo: 
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: default value for inlineInfiniteInt in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: default value for inlineInfiniteInt2 in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: default value for inlineMaxInt in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: default value for inlineMinInt in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: default value for negFactor in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: default value for negFactor2 in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: default value for negFactor3 in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: '"paths./fixture.get.parameters" must validate one and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: Checked value must be of type integer with format uint32 in inlineInfiniteInt
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineInfiniteInt in query should be greater than or equal to 0
    withContinueOnErrors: true
    isRegexp: false
  - message: Checked value must be of type integer with format uint32 in negFactor3
    withContinueOnErrors: true
    isRegexp: false
  - message: 'negFactor in query must be of type number, because: factor in multipleOf must be positive: -300'
    withContinueOnErrors: true
    isRegexp: false
  - message: negFactor2 in query should be a multiple of 3
    withContinueOnErrors: true
    isRegexp: false
  - message: Minimum boundary value must be of type integer with format uint64 in inlineMaxInt
    withContinueOnErrors: true
    isRegexp: false
  - message: Maximum boundary value must be of type integer with format uint64 in inlineMaxInt
    withContinueOnErrors: true
    isRegexp: false
  - message: Minimum boundary value must be of type integer with format uint32 in inlineMinInt
    withContinueOnErrors: true
    isRegexp: false
  - message: Maximum boundary value must be of type integer with format uint32 in inlineMinInt
    withContinueOnErrors: true
    isRegexp: false
  - message: definitions.myId.uint64.default in body should be less than or equal to 0
    withContinueOnErrors: true
    isRegexp: false
  - message: definitions.myId.uint8.default in body should be less than or equal to 255
    withContinueOnErrors: true
    isRegexp: false
  - message: Checked value must be of type integer with format uint32 in inlineInfiniteInt2
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineInfiniteInt2 in query should be greater than or equal to 0
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings:
  - message: definition "#/definitions/myId" is not used anywhere
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineMaxInt in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineInfiniteInt2 in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
  - message: negFactor2 in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineInfiniteInt in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
  - message: negFactor in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
  - message: negFactor3 in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineMinInt in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
fixture-581-inline-param.yaml:
  comment: A variation on the theme of number constraints, inspired by isssue#581.
    Focuses on inline params.
  todo: The negative multiple message should be part of he error validation errors.
    Still limited by support of default values check
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./fixture.get.parameters" must validate one and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: default value for inlineInfiniteInt in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: default value for inlineMaxInt in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: default value for inlineMinInt in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: default value for negFactor in query does not validate its schema
    withContinueOnErrors: true
    isRegexp: false
  - message: Maximum boundary value must be of type integer (default format) in inlineMaxInt
    withContinueOnErrors: true
    isRegexp: false
  - message: Minimum boundary value must be of type integer (default format) in inlineMinInt
    withContinueOnErrors: true
    isRegexp: false
  - message: Minimum boundary value must be of type integer (default format) in inlineInfiniteInt
    withContinueOnErrors: true
    isRegexp: false
  - message: Maximum boundary value must be of type integer (default format) in inlineInfiniteInt
    withContinueOnErrors: true
    isRegexp: false
  - message: 'negFactor in query must be of type number, because: factor in multipleOf must be positive: -300'
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineMinInt in query should be less than or equal to 1
    withContinueOnErrors: true
    isRegexp: false
  - message: definitions.myId.uint64.default in body should be less than or equal to 0
    withContinueOnErrors: true
    isRegexp: false
  - message: definitions.myId.uint8.default in body should be less than or equal to 255
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings:
  - message: definition "#/definitions/myId" is not used anywhere
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineMaxInt in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineInfiniteInt in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
  - message: negFactor in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
  - message: inlineMinInt in query has a default but no valid schema
    withContinueOnErrors: true
    isRegexp: false
fixture-581.yaml:
  comment: 'Issue#581 : value and type checking in constraints'
  todo: issue#581 not solved since only inline params are subject to this validation
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./fixture.get.parameters" must validate one and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: definitions.myId.uint8.default in body should be less than or equal to 255
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings:
  - message: definition "#/definitions/myId" is not used anywhere
    withContinueOnErrors: true
    isRegexp: false
fixture-859-2.yaml:
  comment: 'Issue#859: clear message on unresolved $ref. Additional scenario with items'
  todo: 
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  # This one is a regexp since we cannot predict which $ref will fail first
  - message: 'some references could not be resolved in spec\. First found: object has no key ".*"'
    withContinueOnErrors: false
    isRegexp: true
  expectedWarnings:
  - message: definition "#/definitions/myoutput" is not used anywhere
    withContinueOnErrors: true
    isRegexp: false
fixture-859-good.yaml:
  comment: 'Issue#859: clear message on unresolved $ref. Valid spec baseline for further scenarios'
  todo: ""
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings:
  - message: definition "#/definitions/myoutput" is not used anywhere
    withContinueOnErrors: false
    isRegexp: false
fixture-859.yaml:
  comment: 'Issue#859: clear message on unresolved $ref. First scenario for messages
    Supplement for items, arrays and other nested structures in fixture-859-2.yaml'
  todo: 
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./.get.parameters" must validate one and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: 'some references could not be resolved in spec\. First found: object has no key ".*"'
    withContinueOnErrors: true
    isRegexp: true
  - message: 'could not resolve reference in "/".GET to $ref #/parameters/rateLimit: object has no key "rateLimit"'
    withContinueOnErrors: true
    isRegexp: false
  - message: some parameters definitions are broken in "/".POST. Cannot continue validating parameters for operation
    withContinueOnErrors: true
    isRegexp: false
  - message: some parameters definitions are broken in "/".GET. Cannot continue validating parameters for operation
    withContinueOnErrors: true
    isRegexp: false
  - message: 'could not resolve reference in "/".POST to $ref #/parameters/rateLimit: object has no key "rateLimit"'
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings:
  - message: definition "#/definitions/myoutputs" is not used anywhere
    withContinueOnErrors: true
    isRegexp: false
  - message: parameter "#/parameters/rateLimits" is not used anywhere
    withContinueOnErrors: true
    isRegexp: false
  - message: definition "#/definitions/records" is not used anywhere
    withContinueOnErrors: true
    isRegexp: false
  - message: definition "#/definitions/myparams" is not used anywhere
    withContinueOnErrors: true
    isRegexp: false
fixture-1050.yaml:
  comment: 'Valid spec: fix issue#1050 (dot separated path params)'
  todo: ""
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings: []
fixture-1171.yaml:
  comment: An invalid array definition
  todo: Missing check on $ref sibling
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./servers/{server_id}/zones.get.parameters" must validate one
      and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: '"paths./server/getBody.get.parameters" must validate one and only one
      schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: '"paths./server/getBody.get.responses.200" must validate one and only
      one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: '"paths./server/getBody.get.responses.200.schema" must validate one and
      only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: 'paths./server/getBody.get.responses.200.schema.properties.name in body
      must be of type object: "string"'
    withContinueOnErrors: false
    isRegexp: false
  - message: 'paths./server/getBody.get.responses.200.schema.properties.$ref in body
      must be of type object: "string"'
    withContinueOnErrors: false
    isRegexp: false
  - message: paths./server/getBody.get.responses.200.description in body is required
    withContinueOnErrors: false
    isRegexp: false
  - message: items in definitions.Zones is required
    withContinueOnErrors: false
    isRegexp: false
  - message: '"definitions.InvalidZone.items" must validate at least one schema (anyOf)'
    withContinueOnErrors: false
    isRegexp: false
  - message: definitions.InvalidZone.items.name in body is a forbidden property
    withContinueOnErrors: false
    isRegexp: false
  - message: path param "other_server_id" is not present in path "/servers/{server_id}/zones"
    withContinueOnErrors: true
    isRegexp: false
  - message: 'operation "getBody" has more than 1 body param: ["" "yet_other_server_id"]'
    withContinueOnErrors: true
    isRegexp: false
  - message: body param "yet_other_server_id" for "getBody" is a collection without
      an element type (array requires items definition)
    withContinueOnErrors: true
    isRegexp: false
  - message: in operation "listZones",path param "other_server_id" must be declared
      as required
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings: []
fixture-1231.yaml:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"parameters.customerIdParam" must validate one and only one schema (oneOf).
      Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: '/v1/broker/{customer_id}.id in body must be of type uuid: "mycustomer"'
    withContinueOnErrors: true
    isRegexp: false
  - message: '/v1/broker/{customer_id}.create_date in body must be of type date-time:
      "bad-date"'
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings: []
fixture-1238.yaml:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: definitions.RRSets in body must be of type array
    withContinueOnErrors: false
    isRegexp: false
  expectedWarnings: []
fixture-1243-2.yaml:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: path param "{loadBalancerId}" has no parameter definition
    withContinueOnErrors: false
    isRegexp: false
  expectedWarnings: []
fixture-1243-3.yaml:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./loadBalancers/{loadBalancerId}/backendSets.get.parameters" must
      validate one and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: in operation "ListBackendSets",path param "loadBalancerId" must be declared
      as required
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings: []
fixture-1243-4.yaml:
  comment: Check garbled path strings
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./loadBalancers/{aLotOfLoadBalancerIds}/backendSets.get.parameters"
      must validate one and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: path param "{aLotOfLoadBalancerIds}" has no parameter definition
    withContinueOnErrors: true
    isRegexp: false
  - message: path /loadBalancers/{aLotOfLoadBalancerIds}/backendSets overlaps with
      /loadBalancers/{loadBalancerId}/backendSets
    withContinueOnErrors: true
    isRegexp: false
  - message: path param "{sid }" has no parameter definition
    withContinueOnErrors: true
    isRegexp: false
  - message: path param "sid" is not present in path "/othercheck/{si/d}warnMe"
    withContinueOnErrors: true
    isRegexp: false
  - message: path param "sid" is not present in path "/othercheck/{sid }/warnMe"
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings:
  - message: in path "/othercheck/{sid }/warnMe", param "{sid }" contains {,} or white
      space. Albeit not stricly illegal, this is probably no what you want
    withContinueOnErrors: true
    isRegexp: false
  - message: path stripped from path parameters /othercheck/{X/warnMe contains {,}
      or white space. This is probably no what you want.
    withContinueOnErrors: true
    isRegexp: false
  - message: path stripped from path parameters /othercheck/{si/d}warnMe contains
      {,} or white space. This is probably no what you want.
    withContinueOnErrors: true
    isRegexp: false
fixture-1243-5.json:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: path param "{sid}" has no parameter definition
    withContinueOnErrors: false
    isRegexp: false
  - message: path param "{sid" is not present in path "/othercheck/{{sid}/warnMe"
    withContinueOnErrors: false
    isRegexp: false
  - message: path param "sid" is not present in path "/othercheck/{si/d}warnMe"
    withContinueOnErrors: false
    isRegexp: false
  - message: path /loadBalancers/{aLotOfLoadBalancerIds}/backendSets overlaps with
      /loadBalancers/{loadBalancerId}/backendSets
    withContinueOnErrors: false
    isRegexp: false
  expectedWarnings:
  - message: in path "/othercheck/{sid }/warnMe", param "{sid }" contains {,} or white
      space. Albeit not stricly illegal, this is probably no what you want
    withContinueOnErrors: false
    isRegexp: false
  - message: path stripped from path parameters /othercheck/{X/warnMe contains {,}
      or white space. This is probably no what you want.
    withContinueOnErrors: false
    isRegexp: false
  - message: path stripped from path parameters /othercheck/{si/d}warnMe contains
      {,} or white space. This is probably no what you want.
    withContinueOnErrors: false
    isRegexp: false
fixture-1243-5.yaml:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./loadBalancers/{aLotOfLoadBalancerIds}/backendSets.get.parameters"
      must validate one and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: '"paths./othercheck/{{sid}/warnMe.get.parameters" must validate one and
      only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: '"paths./othercheck/{sid }/warnMe.get.parameters" must validate one and
      only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: '"paths./othercheck/{si/d}warnMe.get.parameters" must validate one and
      only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: path param "{aLotOfLoadBalancerIds}" has no parameter definition
    withContinueOnErrors: true
    isRegexp: false
  - message: path param "{sid}" has no parameter definition
    withContinueOnErrors: true
    isRegexp: false
  - message: path param "{sid }" has no parameter definition
    withContinueOnErrors: true
    isRegexp: false
  - message: path /loadBalancers/{aLotOfLoadBalancerIds}/backendSets overlaps with
      /loadBalancers/{loadBalancerId}/backendSets
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings:
  - message: in path "/othercheck/{sid }/warnMe", param "{sid }" contains {,} or white
      space. Albeit not stricly illegal, this is probably no what you want
    withContinueOnErrors: true
    isRegexp: false
  - message: path stripped from path parameters /othercheck/{X/warnMe contains {,}
      or white space. This is probably no what you want.
    withContinueOnErrors: true
    isRegexp: false
  - message: path stripped from path parameters /othercheck/{si/d}warnMe contains
      {,} or white space. This is probably no what you want.
    withContinueOnErrors: true
    isRegexp: false
fixture-1243-good.yaml:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings: []
fixture-1243.yaml:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200"
      must validate one and only one schema (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.$ref
      in body is a forbidden property
    withContinueOnErrors: false
    isRegexp: false
  - message: paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.type
      in body is required
    withContinueOnErrors: false
    isRegexp: false
  - message: path param "{loadBalancerId}" has no parameter definition
    withContinueOnErrors: true
    isRegexp: false
  - message: 'in "paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200":
      $ref are not allowed in headers. In context for header "opc-response-id", one
      may not use $ref=":#/x-descriptions/opc-response-id"'
    withContinueOnErrors: false
    isRegexp: false
  expectedWarnings: []
fixture-1289-donotload.json:
  comment: ""
  todo: ""
  expectedLoadError: true
  expectedValid: false
  expectedMessages:
  - message: .*yaml:.+
    withContinueOnErrors: false
    isRegexp: true
  expectedWarnings: []
fixture-1289-donotload.yaml:
  comment: ""
  todo: ""
  expectedLoadError: true
  expectedValid: false
  expectedMessages:
  - message: .*yaml:.+
    withContinueOnErrors: false
    isRegexp: true
  expectedWarnings: []
fixture-1289-good.yaml:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings: []
fixture-1289.yaml:
  comment: ""
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: items in definitions.getSomeIds.properties.someIds is required
    withContinueOnErrors: false
    isRegexp: false
  expectedWarnings: []
fixture-collisions.yaml:
  comment: A supplement scenario for uniqueness tests in paths, operations, parameters
  todo: ""
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: '"paths./bigbody/get.get.parameters" must validate one and only one schema
      (oneOf). Found none valid'
    withContinueOnErrors: false
    isRegexp: false
  - message: paths./dupparam/get.get.parameters in body shouldn't contain duplicates
    withContinueOnErrors: false
    isRegexp: false
  - message: 'operation "ope2" has more than 1 body param: ["loadBalancerId2" "loadBalancerId3"]'
    withContinueOnErrors: true
    isRegexp: false
  - message: '"ope6" is defined 2 times'
    withContinueOnErrors: true
    isRegexp: false
  - message: '"ope5" is defined 2 times'
    withContinueOnErrors: true
    isRegexp: false
  - message: path /duplpath/{id1}/get overlaps with /duplpath/{id2}/get
    withContinueOnErrors: true
    isRegexp: false
  - message: duplicate parameter name "id2" for "query" in operation "ope7"
    withContinueOnErrors: true
    isRegexp: false
  - message: 'params in path "/loadBalancers/{loadBalancerId}/backendSets/{loadBalancerId}/get"
      must be unique: "{loadBalancerId}" conflicts whith "{loadBalancerId}"'
    withContinueOnErrors: true
    isRegexp: false
  expectedWarnings: []
fixture-constraints-on-numbers.yaml:
  comment: A supplement scenario for native vs float-based constraint verifications
    on integers (multipleOf,maximum, minimum).
  todo: This scenario supports current checks, that is for constraints on schemas
    with a default value only. It should be generalized (issue#581) and also for example
    values (issue#1231)
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: default value for param1 in query does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  - message: default value for param2 in query does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  - message: default value for param3 in query does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  - message: default value for param4 in query does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  - message: default value for param5 in query does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  - message: default value for param6 in query does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  - message: default value for param7 in query does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  - message: default value for param8 in query does not validate its schema
    withContinueOnErrors: false
    isRegexp: false
  # Note how value has been implicitely converted to fload64
  - message: param1 in query should be a multiple of 2.147483648e+09
    withContinueOnErrors: false
    isRegexp: false
  - message: MultipleOf value must be of type integer with format int32 in param1
    withContinueOnErrors: false
    isRegexp: false
  - message: MultipleOf value must be of type integer with format int32 in param2
    withContinueOnErrors: false
    isRegexp: false
  - message: Checked value must be of type integer with format int32 in param2
    withContinueOnErrors: false
    isRegexp: false
  - message: Checked value must be of type integer with format int32 in param3
    withContinueOnErrors: false
    isRegexp: false
  - message: param3 in query should be a multiple of 10
    withContinueOnErrors: false
    isRegexp: false
  - message: Checked value must be of type integer with format int32 in param4
    withContinueOnErrors: false
    isRegexp: false
  - message: Checked value must be of type integer with format int32 in param5
    withContinueOnErrors: false
    isRegexp: false
  # Note how value has been implicitely converted to fload64
  - message: param5 in query should be less than or equal to 2.147483647e+09
    withContinueOnErrors: false
    isRegexp: false
  - message: Checked value must be of type integer with format uint32 in param6
    withContinueOnErrors: false
    isRegexp: false
  - message: Checked value must be of type integer with format int32 in param7
    withContinueOnErrors: false
    isRegexp: false
  - message: Checked value must be of type integer with format uint32 in param8
    withContinueOnErrors: false
    isRegexp: false
  # Note how value has been implicitely converted to fload64
  - message: param8 in query should be greater than or equal to 2.147483647e+09
    withContinueOnErrors: false
    isRegexp: false
  expectedWarnings:
  # Those used to be a debug log: now its a warning
  - message: param1 in query has a default but no valid schema
    withContinueOnErrors: false
    isRegexp: false
  - message: param2 in query has a default but no valid schema
    withContinueOnErrors: false
    isRegexp: false
  - message: param3 in query has a default but no valid schema
    withContinueOnErrors: false
    isRegexp: false
  - message: param4 in query has a default but no valid schema
    withContinueOnErrors: false
    isRegexp: false
  - message: param5 in query has a default but no valid schema
    withContinueOnErrors: false
    isRegexp: false
  - message: param6 in query has a default but no valid schema
    withContinueOnErrors: false
    isRegexp: false
  - message: param7 in query has a default but no valid schema
    withContinueOnErrors: false
    isRegexp: false
  - message: param8 in query has a default but no valid schema
    withContinueOnErrors: false
    isRegexp: false
fixture-invalid-example-property.yaml:
  comment: 
  todo: this one should fail when examples are validated
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings: []
fixture-valid-example-property.yaml:
  comment: 
  todo: 
  expectedLoadError: false
  expectedValid: true
  expectedMessages: []
  expectedWarnings: []
petstore-expanded.json:
  comment: Fail Ref expansion in ContinueOnErrors mode panics
  todo: 
  expectedLoadError: false
  expectedValid: false
  expectedMessages:
  - message: invalid ref "pet"
    withContinueOnErrors: false
    isRegexp: false
  # this one is a regexp since the full absolute path of the ref is reported
  - message: 'could not resolve reference in newPet to \$ref pet: open .*\/pet: no such file or directory'
    withContinueOnErrors: true
    isRegexp: true
  expectedWarnings: []
