// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSomeIdsOpsHandlerFunc turns a function with the right signature into a get some ids ops handler
type GetSomeIdsOpsHandlerFunc func(GetSomeIdsOpsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSomeIdsOpsHandlerFunc) Handle(params GetSomeIdsOpsParams) middleware.Responder {
	return fn(params)
}

// GetSomeIdsOpsHandler interface for that can handle valid get some ids ops params
type GetSomeIdsOpsHandler interface {
	Handle(GetSomeIdsOpsParams) middleware.Responder
}

// NewGetSomeIdsOps creates a new http.Handler for the get some ids ops operation
func NewGetSomeIdsOps(ctx *middleware.Context, handler GetSomeIdsOpsHandler) *GetSomeIdsOps {
	return &GetSomeIdsOps{Context: ctx, Handler: handler}
}

/*GetSomeIdsOps swagger:route GET /getSomeIds getSomeIdsOps

GetSomeIdsOps get some ids ops API

*/
type GetSomeIdsOps struct {
	Context *middleware.Context
	Handler GetSomeIdsOpsHandler
}

func (o *GetSomeIdsOps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSomeIdsOpsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
